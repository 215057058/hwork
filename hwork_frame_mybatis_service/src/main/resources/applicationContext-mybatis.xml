<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<!-- 阿里 druid数据库连接池 -->
	<bean id="ds.sys" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="${ds.sys.dbUrl}" />
		<property name="username" value="${ds.sys.dbUserName}" />
		<property name="password" value="${ds.sys.dbPwd}" />
		<property name="driverClassName" value="${ds.sys.dbDriverClass}" />
		<property name="filters" value="${ds.sys.filters}" />
		<property name="maxActive" value="${ds.sys.maxActive}" />
		<property name="initialSize" value="${ds.sys.initialSize}" />
		<property name="maxWait" value="${ds.sys.maxWait}" />
		<property name="minIdle" value="${ds.sys.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${ds.sys.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${ds.sys.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${ds.sys.validationQuery}" />
		<property name="testWhileIdle" value="${ds.sys.testWhileIdle}" />
		<property name="testOnBorrow" value="${ds.sys.testOnBorrow}" />
		<property name="testOnReturn" value="${ds.sys.testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${ds.sys.maxOpenPreparedStatements}" />
		<property name="removeAbandoned" value="${ds.sys.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${ds.sys.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${ds.sys.logAbandoned}" />
	</bean>
	<bean id="dataSource" class="com.hwork.frame.mybatis.cfg.DynamicDataSourceDruid">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="ds.sys" value-ref="ds.sys"></entry>
			</map>
		</property>
		<!-- 默认使用dsSys的数据源 -->
		<property name="defaultTargetDataSource" ref="ds.sys"></property>
	</bean>
	<!-- MyBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations"
			value="classpath:com/hwork/**/**/persistence/*.xml" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							helperDialect=oracle
							reasonable=true
							supportMethodsArguments=true
							params=count=countSql
							autoRuntimeDialect=true
							rowBoundsWithCount=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- spring与mybatis整合配置，扫描所有dao -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hwork.*.*.persistence" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 对dataSource 数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 事务管理 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 对insert,create,update,modify,delete,remove 开头的方法进行事务管理,只要有异常就回滚 -->
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable"
				read-only="false" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="modify*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" read-only="false" />
			<!-- find,get,select,count开头的方法,开启只读,提高数据库访问性能 -->
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<!-- 对其他方法 使用默认的事务管理 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务 aop 配置 -->
	<aop:config>
		<aop:pointcut id="serviceMethods"
			expression="execution(public * com.hwork.busi.*.service..*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
	</aop:config>
	
	<!-- 阿里 druid数据库连接池 -->
	<bean id="dynamicDataSourceDruid" class="com.hwork.frame.mybatis.cfg.DynamicDataSourceDruid" />
</beans>
